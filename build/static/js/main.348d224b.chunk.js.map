{"version":3,"sources":["app/chatSlice.js","firebase.js","SidebarChat.js","userSlice.js","Sidebar.js","Message.js","Chat.js","Imessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["chatSlice","createSlice","name","initialState","chatId","chatName","reducers","setChat","state","action","payload","actions","selectChatName","chat","selectChatId","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","userSlice","user","login","logout","selectUser","Sidebar","url","useSelector","chats","setChats","signOut","placeholder","IconButton","variant","prompt","add","key","Message","forwardRef","ref","contents","email","displayName","uid","toLocaleString","Chat","input","setInput","messages","setMessages","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","Imessage","Login","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.348d224b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState: {\r\n    chatId: null,\r\n    chatName:null\r\n  },\r\n  reducers: {\r\n    setChat:( state,action) => {\r\n      state.chatId=action.payload.chatId;\r\n      state.chatName=action.payload.chatName;\r\n    },\r\n    \r\n    \r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatName =(state) =>   state.chat.chatName;\r\nexport const selectChatId =(state) =>   state.chat.chatId;\r\n\r\n\r\nexport default chatSlice.reducer;\r\n","import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAMKx5yAO5LTtKSeJnDOS_4ydPypsl_pRw\",\r\n    authDomain: \"imessage-84cac.firebaseapp.com\",\r\n    databaseURL: \"https://imessage-84cac.firebaseio.com\",\r\n    projectId: \"imessage-84cac\",\r\n    storageBucket: \"imessage-84cac.appspot.com\",\r\n    messagingSenderId: \"676611238445\",\r\n    appId: \"1:676611238445:web:06a348e9d518da80fb26a4\",\r\n    measurementId: \"G-597S5BNL0W\"\r\n  };\r\n\r\nconst firebaseApp=firebase.initializeApp(firebaseConfig);\r\nconst db=firebaseApp.firestore();\r\nconst auth=firebase.auth();\r\nconst provider=new firebase.auth.GoogleAuthProvider();\r\nexport default db;\r\nexport {auth,provider};","import { Avatar } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChat } from './app/chatSlice'\r\nimport db from './firebase'\r\nimport * as timeago from 'timeago.js';\r\nimport './SidebarChat.css'\r\nconst SidebarChat = ({id,chatName}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [chatInfo, setChatInfo] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        db.collection('chats').doc(id).collection('messages').orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot((snapshot)=>{\r\n            setChatInfo(snapshot.docs.map((doc)=>doc.data()))\r\n        })\r\n        \r\n    }, [id])\r\n    return (\r\n        <div onClick={()=>{\r\n            dispatch(setChat({\r\n                chatId:id,\r\n                chatName:chatName\r\n            }))\r\n        }}\r\n            \r\n             className=\"sidebarChat\">\r\n            <Avatar src={chatInfo[0]?.photo}/>\r\n            <div className=\"sidebarChat-info\">\r\n    <h3>{chatName}</h3>\r\n    <p>{chatInfo[0]?.message}</p>\r\n    <small>{\r\n        timeago.format(new Date(chatInfo[0]?.timestamp?.toDate()))\r\n        }</small>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login:( state,action) => {\r\n      state.user=action.payload\r\n    },\r\n    logout: (state,action) => {\r\n      state.user=null;\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const { login,logout } = userSlice.actions;\r\n\r\nexport const selectUser =(state) =>   state.user.user  ;\r\n\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect,useState } from 'react'\r\nimport './Sidebar.css'\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SidebarChat from './SidebarChat';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './userSlice';\r\nimport db, { auth } from './firebase';\r\nconst Sidebar = () => {\r\n    const url=useSelector((state)=>state.user.user.photo);\r\n\r\n    const [chats, setChats] = useState([]);\r\n   \r\n         useEffect(()=>{\r\n         db.collection('chats').onSnapshot(snapshot=>{\r\n            setChats(snapshot.docs.map(doc=>({\r\n               id:doc.id,\r\n               data:doc.data()\r\n            })))\r\n        })\r\n         },[])    \r\n\r\nconst addChat=()=>{\r\n    const chatName=prompt('Please enter a chat NAme');\r\n    \r\n    db.collection('chats').add({\r\n        chatName:chatName,\r\n    })\r\n}\r\n    \r\n    return (\r\n        <div className=\"sidebar\">\r\n          <div className=\"sidebar-header\">\r\n              <Avatar onClick={()=>auth.signOut()} src={url}className=\"sidebar-avatar\"/>\r\n              <div className=\"sidebar-input\">\r\n                  <SearchIcon/>\r\n                  <input placeholder=\"search\"/>\r\n              </div>\r\n             <IconButton variant=\"outlined\" className=\"sidebar-inputButton\">\r\n              <RateReviewIcon onClick={addChat}/>\r\n              </IconButton>\r\n          </div>\r\n            <div className=\"sidebar-chats\">\r\n            {\r\n            chats.map(({id,data:{chatName}})=>(\r\n\r\n\r\n   <SidebarChat key={id} id={id} chatName={chatName}/>\r\n           \r\n    ))\r\n         }              \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './Message.css'\r\nimport { selectUser } from './userSlice'\r\n\r\n\r\nconst Message = forwardRef(\r\n    ({id,contents:{timestamp,displayName,email,message,photo,uid}},ref) => {\r\n    const user=useSelector(selectUser)\r\n    return (\r\n        <div ref={ref} className={`message ${user.email ===email && \"message-sender\"}`}>\r\n            <Avatar  className=\"message-photo\"src={photo}/>\r\n    <p>{message}</p>\r\n         <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n         </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import React,{useState,useEffect} from 'react'\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport './Chat.css'\r\nimport FlipMove from 'react-flip-move'\r\nimport { IconButton } from '@material-ui/core';\r\nimport Message from './Message';\r\nimport firebase from 'firebase'\r\nimport { selectChatId, selectChatName } from './app/chatSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport db from './firebase';\r\nimport * as timeago from 'timeago.js';\r\nimport { selectUser } from './userSlice';\r\nconst Chat = () => {\r\n    const[input,setInput]=useState('');\r\n    const user=useSelector(selectUser);\r\n    const chatName=useSelector(selectChatName);\r\n    const chatId=useSelector(selectChatId);\r\n    const [messages,setMessages]=useState([]);\r\n\r\n\r\n    useEffect(()=>{\r\nif(chatId)\r\n{\r\n\r\ndb.collection('chats').doc(chatId).collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot=>{\r\n    setMessages(snapshot.docs.map(doc=>({\r\n       id:doc.id,\r\n       data:doc.data()\r\n    })))\r\n})\r\n}\r\n    },[chatId])\r\n    const sendMessage=(e)=>\r\n    {\r\n         e.preventDefault();\r\n         \r\n     \r\n          db.collection('chats').doc(chatId).collection('messages').add({\r\n              timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n              message:input,\r\n              uid:user.uid,\r\n              photo:user.photo,\r\n              email:user.email,\r\n              displayName:user.displayName\r\n\r\n          })\r\n\r\n          setInput('')\r\n\r\n\r\n        }\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat-header\">\r\n    <h4>\r\n    To:<span className=\"chat-name\">{chatName}</span>\r\n        </h4>\r\n    <strong>Details</strong>\r\n            </div>\r\n <div className=\"chat-message\">\r\n     <FlipMove>\r\n{\r\n    messages.map(({id,data})=>(\r\n        <Message key={id} contents={data}/>\r\n    ))\r\n}\r\n</FlipMove>\r\n </div>\r\n            <div className=\"chat-input\">\r\n                <form>\r\n                    <input value={input} onChange={(e)=>setInput(e.target.value)} placeholder=\"iMessage\" type=\"text\"/>\r\n                    <button onClick={sendMessage}>Send Message</button>\r\n                </form>\r\n                <IconButton>\r\n                <MicIcon className=\"chat-mic\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport Sidebar from './Sidebar'\r\nimport './Imessage.css'\r\nimport Chat from './Chat'\r\nconst Imessage = () => {\r\n    return (\r\n        <div className=\"imessage\">\r\n     <Sidebar/>\r\n     <Chat/>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Imessage\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport {provider,auth} from './firebase'\r\nimport './Login.css'\r\nconst Login = () => {\r\n    const signIn=()=>\r\n    {\r\n        auth.signInWithPopup(provider).catch(err=>alert(err))\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n     <div className=\"login-logo\">\r\n         <img src=\"https://upload.wikimedia.org/wikipedia/commons/5/56/IMessage_logo_%28Apple_Inc.%29.png\"/>\r\n         <h1>iMessage</h1>\r\n         \r\n         </div> \r\n         <Button onClick={signIn}>Sign In</Button>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React,{useEffect} from 'react';\r\nimport './App.css';\r\nimport Imessage from './Imessage'\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nimport { login, selectUser,logout } from './userSlice';\r\n\r\nconst App=()=>{\r\n  const user=useSelector(selectUser)\r\n  const dispatch = useDispatch();  \r\n  useEffect(()=>{\r\n    auth.onAuthStateChanged((authUser)=>{\r\n      if(authUser)\r\n      {\r\n   \r\n      dispatch(login({\r\n         uid:authUser.uid,\r\n         photo:authUser.photoURL,\r\n         email:authUser.email,\r\n         displayName:authUser.displayName\r\n       }))\r\n      }\r\n      else\r\n      {\r\n  dispatch(logout())\r\n      }\r\n    }\r\n    )\r\n  },[])\r\n  \r\n  \r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      {user ?(\r\n        <Imessage/>\r\n      ):\r\n      <Login/>\r\n            }\r\n      \r\n    </div>\r\n  )\r\n          }\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\n import userReducer from '../userSlice'\r\nimport chatReducer from './chatSlice'\r\n export default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat:chatReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from '@reduxjs/toolkit'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}